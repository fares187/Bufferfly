@page "/home"
@inject IJSRuntime JS


@using BufferCalculator.Model
@using System.ComponentModel
@using System.Diagnostics
@using Bufferfly.Model
@using Bufferfly.extentions

<div class="main-container">

    <div class="left-panel d-flex flex-column align-content-center align-items-center flex-wrap justify-content-center">


        <div class="chemical-card shadow"  style="padding: 7px !important;">
            <h3>Acid</h3>
            <p><strong>Name:</strong> @SelectedCompound?.AcidName</p>
            <p><strong>Formula:</strong> @SelectedCompound?.AcidFormula</p>
            <p><strong>Molecular Weight (g/mol):</strong> @SelectedCompound?.AcidMolecularWeight</p>
        </div>
        <div class="chemical-card shadow"  style="padding: 7px !important;">
            <h3>Base</h3>
            <p><strong>Name:</strong> @SelectedCompound?.BasicName</p>
            <p><strong>Formula:</strong> @SelectedCompound?.BasicFormula</p>
            <p><strong>Molecular Weight (g/mol):</strong> @SelectedCompound?.BasicMolecularWeight</p>
        </div>
        <div class=" justify-content-end">
            <button type="button" style="font-size:1.3vw; padding: 1vw;" class="btn btn-primary shadow" data-bs-toggle="modal" data-bs-target="#firstModal">start</button>
            <button type="button" style="font-size:1.3vw; padding: 1vw;" class="btn btn-secondary shadow" data-bs-toggle="modal" data-bs-target="#AboutModal">About us</button>
        </div>

    </div>
    <div id="experience" class="image-container @(isLoading ? "transitioning" : "")">
 

        @if (isLoading)
        {
            <div class="loading-spinner spinner-grow text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>


        
        }
        <canvas @ref="threeCanvas" id="threeCanvas"></canvas>
    </div>

    <div class="right-panel d-flex flex-column  align-content-center align-items-center flex-wrap justify-content-center"
    @onkeydown="HandleKeyDown" tabindex="0" @ref="rightPanel">

        @foreach (var item in OrderedCompounds.Where(c => c.IsVisible))
        {
            <div class="compound-item @(item == SelectedCompound ? "selected" : "")"
            style="opacity: @item.Opacity;
            transform: scale(@item.Scale);      
            font-size: 1.5dvw;
            padding: 1.4dvw !important;"
            @onclick="() => SelectCompound(item)">
                @item.Name (@item.Pka)
            </div>
        }


    </div>


    <div class="modal fade " id="firstModal" tabindex="-1" aria-labelledby="firstModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <EditForm Model="@calculateModel" OnValidSubmit="HandleSubmit">

                    <div class="modal-body">
                        <DataAnnotationsValidator />
                        <div class="input-group mb-3">

                            <InputNumber @bind-Value="calculateModel.PH" class="form-control" placeholder="ph" aria-label="ph" aria-describedby="basic-addon2" />
                            <span class="input-group-text" id="basic-addon2">@calculateModel.minmax</span>
                        </div>
                        <ValidationMessage For="@(() => calculateModel.PH)" />
                            <br>
                        <div class="input-group mb-3">
                            <InputNumber @bind-Value="calculateModel.Volume" class="form-control" placeholder="Volume" aria-label="Volume" aria-describedby="basic-addon2" />
                            <span class="input-group-text" id="basic-addon2">Liters (L)</span>

                        </div>
                        <ValidationMessage For="@(() => calculateModel.Volume)" />
                            <br>
                        <div class="input-group mb-3">
                            <InputNumber @bind-Value="calculateModel.strength" class="form-control" placeholder="Strengh" aria-label="Strengh" aria-describedby="basic-addon2" />
                            <span class="input-group-text" id="basic-addon2">molar (M)</span>

                        </div>
                        <ValidationMessage For="@(() => calculateModel.strength)" />

                            <br>
                            <br>

                    </div>
                    <div class="modal-footer">
                        <button style="font-size:1.3vw;" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button style="font-size:1.3vw;" type="submit" class="btn btn-primary">calculate</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>


    <div class="modal fade" id="finalModal" tabindex="-1" aria-labelledby="finalModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-xl modal-fullscreen">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 style="font-size: 2vw !important;" class="modal-title fs-5">Result</h1>
                    <button type="button" style="font-size: 2vw !important;" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="chart-container">
                        <canvas id="myChart"></canvas>
                    </div>


                    <div class="d-flex justify-content-between ">  
                        <div style="font-size:1.6vw;"> Ratio: @(Math.Round(AcidCon / BasicCon, 4))</div>

                        <div style="font-size:1.5vw;">Acid concentration : @(Math.Round(AcidCon,4)) (mol/L)</div>
                        <div style="font-size:1.5vw;">Basic concentration : @(Math.Round(BasicCon,4)) (mol/L)</div>
                    </div>
                    <br>
                    <h4 style="font-size:2vw;">Recipe:</h4>
                    <div style="font-size:1.5vw;">
                        @recipe
                    </div>
                    <br>
                    <h4 style="font-size:2vw;">Buffer Capacity:</h4>
                     
                    <div style="font-size:1.5vw;">
                        @BufferCapacity (B)
                    </div>
                     <br>
                    <h4 style="font-size:2vw;">Osmolarity:</h4>
                     
                    <div style="font-size:1.5vw;">
                        @Osmolarity (mOsm/L)
                    </div>
                    <div style="font-size:1.5vw;">
                        @OsmolarityText
                    </div>
                     <br>

                    <h4 style="font-size:2vw;">Self life:</h4>
                    
                    <div style="font-size:1.5vw;">
                        •	Room Temp (non-sterile) : @SelectedCompound.RoomTemp  months
                    </div>
                    <div style="font-size:1.5vw;">
                        •	Refrigerated (non-sterile) : @SelectedCompound.Refrigeratednon months
                    </div>
                    <div style="font-size:1.5vw;">
                        •	Refrigerated (Sterile-filtered) : @SelectedCompound.Refrigerated  months
                    </div>




                </div>

            </div>
        </div>
    </div>


    <div class="modal fade" id="AboutModal" tabindex="-1" aria-labelledby="AboutModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-scrollable modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5">About us</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body d-flex flex-column">
                    <div class="">

                        <h2 style="font-size:1.8vw;">This is an underdevelopment Project a collaboration between students of the Faculty of Pharmacy at Minya University and the Faculty of Computers and Data Science at Alexandria University publiched under MIT License .</h2>




                    </div>
                    <div class="d-flex justify-content-between" >

                        <div class=" d-flex flex-column align-items-center">
                            <h2 style="font-size:2vw;">Faculty of Computers and Data Science</h2>
                            <h3 style="font-size:1.3vw;"> Fares Ahmed Abu Al-Fotouh</h3>

                        </div>
                        <div class=" d-flex flex-column align-items-center">
                            <h2 style="font-size:2vw;"> Faculty of clinical Pharmacy</h2>
                            <h3 style="font-size:1.3vw;">Amr Mohamed Soliman</h3>
                            <h3 style="font-size:1.3vw;">Karim Shaaban Ismail</h3>
                            <h3 style="font-size:1.3vw;">Diaa Ahmed Abd El-Razek</h3>

                        </div>
                    </div>



                </div>

            </div>
        </div>
    </div>



</div>
<script>

    window.drawChart =function (
    C ,
    Volume ,
    MwtA ,
    MwtB ,
    min,
    max,
    yxmin,
    yxmax,
    PKa ,
    Point

    )  {


    console.log(C );
    console.log(Volume );
    console.log(MwtA );
    console.log(MwtB );
    console.log(min);
    console.log(max);
    console.log(PKa );
    console.log(Point);
    const ctx = document.getElementById('myChart').getContext('2d');

    if (window.chartObj) {
    window.chartObj.destroy();
    }

   
    const pHValues = Array.from({length: 100}, (_, i) => min + (i * (max - min)/99));

  
    const acidData = pHValues.map(pH => {
    return {
    x: pH,
    y: (C * Volume * MwtA) / (Math.pow(10, PKa - pH) + 1)
    };
    });

    const baseData = pHValues.map(pH => {

    return {
    x: pH,
    y: C - ((C * Volume * MwtB) / ( Math.pow(10, PKa - pH) + 1))
    };
    });

   
    const yValues = [...acidData.map(p => p.y), ...baseData.map(p => p.y)];
    const yMin = Math.min(...yValues);
    const yMax = Math.max(...yValues);
    const verticalLineData = [
    {x: Point, y: yMin},
    {x: Point, y: yMax}
    ];

   
    window.chartObj = new Chart(ctx, {
    type: 'line',
    data: {
    datasets: [{
    label: 'Acid Mass',
    data: acidData,
    borderColor: 'rgb(255, 99, 132)',
    tension: 0.4,
    pointRadius: 0
    }, {
    label: 'Base Mass',
    data: baseData,
    borderColor: 'rgb(54, 162, 235)',
    tension: 0.4,
    pointRadius: 0
    }, {
    label: 'Vertical Line',
    data: verticalLineData,
    borderColor: 'rgb(0, 0, 0)',
    borderWidth: 1,
    borderDash: [5, 5],
    pointRadius: 0
    }]
    },
    options: {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
    x: {
    type: 'linear',
    min: min,
    max: max,
    title: {
    display: true,
    text: 'PH'
    }
    },
    y: {
    type: 'linear',
    min: yxmin,
    max: yxmax,
    title: {
    display: true,
    text: 'Mass'
    },
    beginAtZero: false
    }
    },
    plugins: {
    legend: {
    position: 'top',
    },
    tooltip: {
    mode: 'nearest',
    intersect: false
    }
    },
    interaction: {
    mode: 'nearest',
    intersect: false
    }
    }
    });
    }


</script>
<script>


    window.showBootstrapModal = (modalId) => {
    const modal = new bootstrap.Modal(document.getElementById(modalId));
    modal.show();
    };

</script>




@code {
    public int VisibleItemsCount = 3;
    public CalculateModel calculateModel = new();
    public List<ChemicalCompound> compounds = new();
    public ChemicalCompound SelectedCompound=new();
    public double AcidMass = 0;
    public double basicMass = 0;
    public double BufferCapacity = 0;
    public double AcidCon = 0;
    public double BasicCon = 0;
    public double Osmolarity = 0;
    public string OsmolarityText;
    public string recipe = "";
    public int selectedIndex = 0;


    private ElementReference rightPanel;


    private CancellationTokenSource? _navigationCts;
    private bool _isTransitioning;



    private ElementReference threeCanvas;
    private IJSObjectReference? threeModule;
    private IJSObjectReference? threeInstance;
    private DotNetObjectReference<Home>? dotNetInstance;
    private bool isLoading = true;

    private IEnumerable<ChemicalCompound> OrderedCompounds =>
    compounds.OrderBy(c => c.RelativePosition);

    private async Task HandleSubmit()
    {
        if (calculateModel.PH < SelectedCompound.MinPH || calculateModel.PH > SelectedCompound.MaxPH)
        {
            await JS.InvokeVoidAsync("showalert", "Warning", $"{SelectedCompound.Name} is usable only in the range between  PH  ( {SelectedCompound.MinPH} to {SelectedCompound.MaxPH})", "warning");
            return;
        }

        AcidCon = (calculateModel.strength) / (1 + (Math.Pow(10, (calculateModel.PH - SelectedCompound.Pka))));

        BasicCon = calculateModel.strength - AcidCon;
        AcidMass = AcidCon * ((double)calculateModel.Volume) * ((double)SelectedCompound.AcidMolecularWeight);
        basicMass = BasicCon * calculateModel.Volume * SelectedCompound.BasicMolecularWeight;
        BufferCapacity = Math.Round(2.303 * calculateModel.strength * ((AcidCon * BasicCon) / Math.Pow((AcidCon * BasicCon), 2)), 4);
        recipe = $"Add {Math.Round(AcidMass, 4)} g of {SelectedCompound.AcidFormula} and {Math.Round(basicMass, 4)} g of {SelectedCompound.BasicFormula} in {calculateModel.Volume - (calculateModel.Volume * 0.1)} L of deionized water.Adjust the pH by pH meter to {calculateModel.PH} with a concentrated acid (6 M HCl) or base (6 M NaOH).Finally, add deionized water to bring the final volume to {calculateModel.Volume} L.";
        double release = SelectedCompound.Pka - Math.Log10((calculateModel.Volume * (SelectedCompound.BasicMolecularWeight + SelectedCompound.AcidMolecularWeight)) - 1);

        Osmolarity = ((((AcidMass / SelectedCompound.AcidMolecularWeight) * SelectedCompound.AcidN) + ((basicMass / SelectedCompound.BasicMolecularWeight) * SelectedCompound.BasicN)) / (calculateModel.Volume)) * 1000;
        Osmolarity = Math.Round(Osmolarity, 4);
        var ranges = new List<(int Min, int Max, string Text)>
        {
            (250, 350, "Eye Drops & Intramuscular injection"),
            (275, 300, "Intravenous Injection"),
            (100, 270, "Hypotonic Nasal Spray"),
            (270, 300, "Isotonic Nasal Sprays"),
            (310, 600, "Hypertonic Nasal Sprays"),
            (100, 245, "Hypotonic Oral Solutions"),
            (246, 300, "Isotonic Oral Solutions"),
            (301, 400, "Hypertonic Oral Solutions"),
            (150, 400, "Isotonic For Skin")
        };

        var matches = new List<string>();
        foreach (var range in ranges)
        {
            if (Osmolarity >= range.Min && Osmolarity <= range.Max)
                matches.Add(range.Text);
        }

        OsmolarityText = string.Join(", ", matches);




        await JS.InvokeVoidAsync("showBootstrapModal", "finalModal");
        await JS.InvokeVoidAsync("drawChart",
            calculateModel.strength,
            calculateModel.Volume,
            SelectedCompound.AcidMolecularWeight,
            SelectedCompound.BasicMolecularWeight,
            (calculateModel.PH < (release - 2)) ? calculateModel.PH - 1 : release - 2,
            (calculateModel.PH > (release + 2)) ? calculateModel.PH + 1 : release + 2,
            ((calculateModel.strength * calculateModel.Volume * SelectedCompound.AcidMolecularWeight) / ((Math.Pow(10, SelectedCompound.Pka - calculateModel.PH)) + 1)) - 0.04,
            calculateModel.strength - ((calculateModel.strength * calculateModel.Volume * SelectedCompound.BasicMolecularWeight) / ((Math.Pow(10, SelectedCompound.Pka - calculateModel.PH)) + 1)) + 0.04,
        SelectedCompound.Pka,
            calculateModel.PH

            );


    }

    [JSInvokable("HandleResize")] 
    public async Task HandleWindowResize() 
    {
        if (threeInstance != null)
        {
            var width = await JS.InvokeAsync<double>("getContainerWidth", ".image-container");
            var height = await JS.InvokeAsync<double>("getContainerHeight", ".image-container");
            await threeInstance.InvokeVoidAsync("resize", width, height);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (threeInstance != null)
        {
            await threeInstance.InvokeVoidAsync("dispose");
            await threeInstance.DisposeAsync();
        }
        dotNetInstance?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            isLoading = true;
            await InvokeAsync(StateHasChanged);
          

            try
            {

              
                threeModule = await JS.InvokeAsync<IJSObjectReference>(
                    "import", "./js/threejsInterop.js");

                var width = await JS.InvokeAsync<double>("getContainerWidth", ".image-container");
                var height = await JS.InvokeAsync<double>("getContainerHeight", ".image-container");
                dotNetInstance = DotNetObjectReference.Create(this);
                threeInstance = await threeModule.InvokeAsync<IJSObjectReference>(
                    "initThreeJS", threeCanvas, width, height, dotNetInstance);


                await JS.InvokeVoidAsync("registerResizeHandler", dotNetInstance);


                await JS.InvokeVoidAsync("registerGlobalKeys",
              DotNetObjectReference.Create(this));

             

            }
            finally
            {

                await InvokeAsync(StateHasChanged);  
            
            }
        }

    }


    [JSInvokable("HandleProgress")]
    public Task HandleLoading(bool loading)
    {
        Thread.Sleep(2000);

        isLoading = loading;
        Navigate(1);
        StateHasChanged();
        return Task.CompletedTask;
    }
    private async Task HandleModelChange(string modelUrl)
    {
      
        _navigationCts?.Cancel();
        _navigationCts = new CancellationTokenSource();

        try
        {
            _isTransitioning = true;
            if (threeInstance != null)
            {
                await threeInstance.InvokeVoidAsync("transitionModels", modelUrl)
                    .AsTask()
                    .WithCancellation(_navigationCts.Token);
            }
        }
       
        finally
        {
            _isTransitioning = false;
        }
    }
    protected override async Task OnInitializedAsync()
    {

        base.OnInitialized();
      
        compounds = new List<ChemicalCompound>
        {
            new ChemicalCompound
            {
                Name = "Sodium Phosphate",
                Pka=6.93,
                MinPH=5.8 ,
                MaxPH=8,

                AcidName="Sodium dihydrogen phosphate",
                AcidFormula="NaH2PO4",
                AcidMolecularWeight=119.98,
                AcidN=2,

                RoomTemp="1–2 ",
                Refrigeratednon="4–6 ",
                Refrigerated="9–12 ",

                BasicName="Sodium hydrogen phosphate",
                BasicFormula="Na2HPO4",
                BasicMolecularWeight=141.96,
                BasicN=3,

                ModelUrl="SodiumPhosphate.glb"
            },
             new ChemicalCompound
            {
                Name = "Sodium Citrate",
               Pka=3.13,
                MinPH=2.13  ,
                MaxPH=4.13,

                AcidName="Citric acid",
                AcidFormula="C6H8O7",
                AcidMolecularWeight=192.123,
                AcidN=1,
                RoomTemp="1-2",
                Refrigeratednon="4-6",
                Refrigerated="6-9",


                BasicName="Sodium dihydrogen citrate",
                BasicFormula="C6H7NaO7",
                BasicMolecularWeight=214.105,
                BasicN=2,
                ModelUrl="SodiumCitrate.glb"
            },
             new ChemicalCompound
            {
                Name = "Sodium Formate",
                Pka=3.75,
                MinPH=2.75  ,
                MaxPH=4.75,

                AcidName="Formic acid",
                AcidFormula="CH2O2",
                AcidMolecularWeight=46.025,
                AcidN=1,

                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",



                BasicName="Sodium formate",
                BasicFormula="CH2O2Na",
                BasicMolecularWeight=68.007,
                BasicN=2,
                ModelUrl="SodiumFormate.glb"
            }, new ChemicalCompound
            {
                Name = "Sodium Carbonate",
                Pka=10.32,
                MinPH=9.2   ,
                MaxPH=10.8,

                AcidName="Sodium bicarbonate",
                AcidFormula="NaHCO3",
                AcidMolecularWeight=84.0066,
                AcidN=2,

                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",



                BasicName="Sodium carbonate",
                BasicFormula="Na2CO3",
                BasicMolecularWeight=105.9888,
                BasicN=3,
                ModelUrl="SodiumCarbonate.glb"
            }, new ChemicalCompound
            {
                Name = "Sodium Acetate",
                Pka=4.76,
                MinPH=3.6    ,
                MaxPH=5.6,

                AcidName="Acetic acid",
                AcidFormula="C2H4O2",
                AcidMolecularWeight=60.052,
                AcidN=1,

                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",

                BasicName="Sodium acetate",
                BasicFormula="C2H3NaO2",
                BasicMolecularWeight=82.034,
                BasicN=2,
                ModelUrl="SodiumAcetate.glb"
            }, new ChemicalCompound
            {
                Name = "MES",
                Pka=6.15,
                MinPH=5.15     ,
                MaxPH=7.15,

                AcidName="MES",
                AcidFormula="C6H13NO4S",
                AcidMolecularWeight=195.2,
                AcidN=1,

                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",

                BasicName="MES",
                BasicFormula="C6H13NO4S",
                BasicMolecularWeight=195.2,
                BasicN=1,
                ModelUrl="MES.glb"
            }, new ChemicalCompound
            {
                Name = "Potassium Phosphate",
                Pka=7.2,
                MinPH=5.8,
                MaxPH=8,

                AcidName="Potassium dihydrogen phosphate",
                AcidFormula="KH2PO4",
                AcidMolecularWeight=136.086,
                AcidN=2,

                RoomTemp="1-2",
                Refrigeratednon="4-6",
                Refrigerated="9-12",


                BasicName="Potassium hydrogen phosphate",
                BasicFormula="K2HPO4",
                BasicMolecularWeight=174.2,
                BasicN=3,
                ModelUrl="PotassiumPhosphate.glb"
            }, new ChemicalCompound
            {
                Name = "MOPS",
                Pka=7.31,
                MinPH=6.5,
                MaxPH=7.9,

                AcidName="MOPS",
                AcidFormula="C7H15NO4S",
                AcidMolecularWeight=209.26,
                AcidN=1,


                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",

                BasicName="MOPS",
                BasicFormula="C7H15NO4S",
                BasicMolecularWeight=209.26,
                BasicN=1,
                ModelUrl="MOPS.glb"
            }, new ChemicalCompound
            {
                Name = "TES",
                Pka=7.55,
                MinPH=6.8,
                MaxPH=8.2,

                AcidName="TES",
                AcidFormula="C6H15NO6S",
                AcidMolecularWeight=229.25,
                AcidN=1,

                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",

                BasicName="TES",
                BasicFormula="C6H15NO6S",
                BasicMolecularWeight=229.25,
                BasicN=1,
                ModelUrl="TES.glb"
            }, new ChemicalCompound
            {
                Name = "HEPES",
                Pka=7.66,
                MinPH=6.8,
                MaxPH=8.2,

                AcidName="HEPES free acid",
                AcidFormula="C8H18N2O4S",
                AcidMolecularWeight=238.301,
                AcidN=1,

                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",

                BasicName="HEPES",
                BasicFormula="C8H17N2O4S",
                BasicMolecularWeight=237.293,
                BasicN=1,
                ModelUrl="HEPES.glb"
            }, new ChemicalCompound
            {
                Name = "Tris",
                Pka=8.06,
                MinPH=7,
                MaxPH=9,

                AcidName="Tris",
                AcidFormula="C4H11NO3",
                AcidMolecularWeight=121.136,
                AcidN=2,

                RoomTemp="1-2",
                Refrigeratednon="3-6",
                Refrigerated="6-9",

                BasicName="Tris base",
                BasicFormula="C4H11NO3",
                BasicMolecularWeight=121.136,
                BasicN=1,
                ModelUrl="Tris.glb"
            }

        };
        compounds = compounds.OrderBy(c => c.RelativePosition).ToList();

        UpdateCompoundsPosition();


    }





    private void UpdateCompoundsPosition()
    {
        for (int i = 0; i < compounds.Count; i++)
        {
            var position = i - selectedIndex;
            if (position > compounds.Count / 2) position -= compounds.Count;
            if (position < -compounds.Count / 2) position += compounds.Count;

            compounds[i].RelativePosition = position;
            compounds[i].IsVisible = Math.Abs(position) < VisibleItemsCount;

            compounds[i].Opacity = Math.Max(0.2, 1 - Math.Abs(position) * 0.3);

            compounds[i].Scale = Math.Max(0.5, 1 - Math.Abs(position) * 0.15);
        }

        Debug.WriteLine("------------------>done");
    }


    private void UpdateVisibleCompounds()
    {
        const int visibleRadius = 3;
        int total = compounds.Count;

        foreach (var compound in compounds)
        {
            int index = compounds.IndexOf(compound);
            int relativePos = (index - selectedIndex + total) % total;

       
            bool isVisible = relativePos <= visibleRadius ||
                           (total - relativePos) <= visibleRadius;

            compound.IsVisible = isVisible;

        
            int visualPosition = relativePos > visibleRadius
                ? -(total - relativePos)
                : relativePos;

            compound.Opacity = Math.Max(0.2, 1 - Math.Abs(visualPosition) * 0.3);
            compound.Scale = Math.Max(0.5, 1 - Math.Abs(visualPosition) * 0.15);
        }
    }

    private async void SelectCompound(ChemicalCompound compound)
    {
        if (_isTransitioning || isLoading) return;
        selectedIndex = compounds.IndexOf(compound);
        SelectedCompound = compound;
        calculateModel.minmax = SelectedCompound.MinPH.ToString() + " - " + SelectedCompound.MaxPH.ToString();
        UpdateCompoundsPosition();

        await HandleModelChange(compound.ModelUrl); 
    }

    [JSInvokable]
    public void HandleGlobalKey(int keyCode)
    {
        if (keyCode == 38) Navigate(-1); 
        if (keyCode == 40) Navigate(1);  
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowUp")
        {
            Navigate(-1);
            Debug.WriteLine("-------------------->up");
        }
        ;
        if (e.Key == "ArrowDown") Navigate(1);
    }

    private async void Navigate(int direction)
    {
        // todo is loading stops naviagtion
        if (_isTransitioning || isLoading) return;

        selectedIndex = (selectedIndex + direction + compounds.Count) % compounds.Count;
        SelectedCompound = compounds[selectedIndex];
        calculateModel.minmax = SelectedCompound.MinPH.ToString() + " - " + SelectedCompound.MaxPH.ToString();
        UpdateCompoundsPosition();


        await HandleModelChange(SelectedCompound.ModelUrl);
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        JS.InvokeVoidAsync("unregisterKeyboardNavigation");
        JS.InvokeVoidAsync("unregisterGlobalKeys");
        _navigationCts?.Cancel();

    }
}

<style>
   
    .js-plotly-plot .plotly .main-title {
        font-size: 16px !important;
    }

    .js-plotly-plot .plotly .axis-title {
        font-size: 12px !important;
    }

    }


    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        z-index: 100;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    .loading-text {
        margin-top: 10px;
        color: #007bff;
        font-weight: 500;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }



    .card-container {
        display: grid;
        gap: 20px;
        margin-top: 20px;
    }




    .canvas-container {
        transition: opacity 0.3s ease;
    }

    .transitioning {
        opacity: 0.5;
        pointer-events: none;
    }

    .main-container {
        display: grid;
        grid-template-columns: 1fr 3fr 1fr; 
        height: 100vh;
        font-family: 'Roboto', sans-serif;
        background: white;
        gap: 20px;
        padding: 20px;
    }

    .left-panel {
        display: flex;
        flex-direction: column;
        gap: 1vw;
    }



    .image-container {
        width: 100%;
        height: 100%;
        position: relative;
        overflow: hidden;
    }

        .image-container::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none; 
            background: radial-gradient( circle at center, transparent 30%, rgba(255, 255, 255, 1) 70% );
            z-index: 1; 
        }

    #threeCanvas {
        width: 100% !important;
        height: 100% !important;
        display: block;
        z-index: 0;
        position: relative;
    }

    .chemical-card {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        font-size: 0.9em;
    }

        .chemical-card h3 {
            margin: 0 0 10px 0;
            font-size: 2.7vw;
            color: #2c3e50;
        }

        .chemical-card p {
            margin: 1px 0;
            font-size: 1.4vw;
            line-height: 1.4;
        }

    .right-panel {
        display: flex;
        flex-direction: column;
        scroll-behavior: smooth;
    }

        .right-panel::-webkit-scrollbar {
            display: none;
        }

    .compound-item {
        padding: 12px 15px;
        margin: 3px 0;
        width: 100%;
        font-size: 1.7vw;
        border-radius: 6px;
        background: #f8f9fa;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    }

        .compound-item.selected {
            background: #007bff;
            color: white;
            transform: scale(1) !important;
            font-weight: 500;
        }

       
        .compound-item:not(.selected):hover {
            transform: scale(1.02);
            background: #e9ecef;
        }

        .compound-item:hover {
            background: #e9ecef;
        }

    .compound-item {
        transition: transform 0.1s ease, opacity 0.1s ease;
    }

        .compound-item:active {
            transform: scale(0.95);
        }

    .chart-container {
       max-width: 100%;
    height: 40vw;
        aspect-ratio: 16/9;
        margin: 0 auto;
        position: relative;
    }












  
    .swal2-container {
        padding: 0.5em !important;
    }

    .swal2-popup {
        width: 90% !important;
        max-width: 300px !important;
        padding: 0.5rem !important;
    }

    
    .swal2-title {
        font-size: 1.2rem !important;
        line-height: 1.4 !important;
        margin-bottom: 0.5em !important;
    }

   
    .swal2-content {
        font-size: 0.9rem !important;
    }

    
    .swal2-actions {
        margin: 0.5em 0 0 0 !important;
        flex-wrap: nowrap;
    }

 
    .swal2-confirm, .swal2-cancel {
        padding: 0.3em 1em !important;
        font-size: 0.9rem !important;
    }

    @@media (max-width: 480px) {
        .swal2-popup {
            max-width: 280px !important;
            max-height: 160px !important;
        }

        .swal2-title {
            font-size: 1.1rem !important;
        }

        .swal2-actions {
            flex-direction: column;
            gap: 0.3rem;
        }

        .swal2-confirm, .swal2-cancel {
            width: 100%;
        }
    }
</style>
